// Dynamic Analysis methods:
// State (time) Vector=[time,x,y,r,  vx,vy,vr,  ax,ay,ar]; 
//                     0   1 2 3    4  5  6   7  8   9
KT=0; // time
KX=1; // x position of center of mass
KY=2; // y position of center of mass
KR=3; // wheel angle (radians)
KVX=4; // x velocity
KVY=5; // y velocity
KVR=6; // rotational velocity
KAX=7; // x acceleration
KAY=8; // y acceleration
KAR=9; // rotational acceleration
//
G = 980.665;  // cm/sec^2
END_TIME = 0.20;  // seconds
DT = 0.01; // delta time in seconds

INIT_ANG = 30; // DEG
IAR = INIT_ANG*PI/180;  // initial angle radians
INIT_POS = XY_from_Gamma(INIT_ANG);
FINAL_POS = [PI*WHEEL_DIA-INIT_POS[0],INIT_POS[1],0];
translate(FINAL_POS) color("blue") cube([0.5,10,1],center=true);
echo(FINIAL_POS=FINAL_POS);

// Vector=[time,x,y,r,  vx,vy,vr,  ax,ay,ar]; 
KIN_0=    [0,INIT_POS[0],INIT_POS[1],IAR, 0,0,0,AX_from_Gamma(IAR,0),AY_from_Gamma(IAR,0),-INIT_POS[2]]; // initial kinematics

function XY_from_Gamma(GAMMA) = 
    // Cog Whobble Wheel function, returns X,Y,Angle Accel give angle
    // GAMMA is in Degrees (unlike the other times!)
    // Third value is Angular acceleration
    [(GAMMA*PI/180)*RAD_WHEEL + sin(GAMMA)*CM1,cos(GAMMA)*CM1, (M1*G*sin(GAMMA)*CM1)/I1];

function AX_from_Gamma(Gamma,Acentrip) = (G - Acentrip)*sin(Gamma*180/PI);

function AY_from_Gamma(Gamma,Acentrip) = (-G + Acentrip)*cos(Gamma*180/PI);

// RECURSIVE TIME STEP FUNCTION, GENERATES ARRAY OF DYNAMIC POSITIONS
function time_stepper(DELTA_T,END_T,PRIOR,time=0) = 
    // COMPUTE NEXT TIME
    let (OldGamma = PRIOR[KR])
    let (Acentrip = 0) //-pow(PRIOR[KVR],2)/CM1) // Centripital Acceleration = v^2/R
    let (AX = AX_from_Gamma(OldGamma,Acentrip))
    let (AY = AY_from_Gamma(OldGamma,Acentrip))
    let (Fx = M1*PRIOR[KAX] + M1*Acentrip*(RAD_WHEEL + CM1*cos(OldGamma)))
    let (Fy = M1*(PRIOR[KAY]+ G - Acentrip*sin(OldGamma)))
    //let (AR = (OBJM*G*sin(OldGamma*180/PI)*CM1 + OBJM*AX*cos(OldGamma*180/PI)/2)/OBJI) // SUM MOMENTS
    let (AR=(-Fy*CM1*sin(OldGamma) + Fx*(RAD_WHEEL+CM1*cos(OldGamma)) )/I1) 
    let (VR = (PRIOR[KVR] + AR*DELTA_T)) 
    let (Gamma = OldGamma + VR*DELTA_T)  // Gamma = wheel angle (radians)
    let (NEW_POS = XY_from_Gamma(Gamma*180/PI))
    let (X = NEW_POS[0]) // COG WHEEL
    let (Y = NEW_POS[1])   // COG WHEEL
    let (VX = (X-PRIOR[KX])/DELTA_T) 
    let (VY = (Y-PRIOR[KY])/DELTA_T)
    let (NEXT_STEP = [time+DELTA_T,X,Y,Gamma,VX,VY,VR,AX,AY,AR])
    echo(str(",",time,",",PRIOR[KX],",",PRIOR[KY],",",PRIOR[KR], ",", PRIOR[KVX],",",PRIOR[KVY],",",PRIOR[KVR],",", PRIOR[KAX],",", PRIOR[KAY],",",PRIOR[KAR],",",Acentrip,",",Fx,",",Fy,","))
    (time <= END_T) ? 
        concat([PRIOR],time_stepper(DELTA_T=DELTA_T,END_T=END_T, PRIOR=NEXT_STEP,time=time+DELTA_T)) :
        [PRIOR] ;

function echo_header() =
    // This function writes header line before data lines for spreadsheet
    echo(str(",time,X,Y,rot,X velo,Y velo,rot velo,X accel,Yaccel,rot accel,Acentrip,Fx,Fy,"));
dummy = echo_header(); // for spreadsheet

SIM1=time_stepper(DELTA_T=DT,END_T=END_TIME,PRIOR=KIN_0);
//echo(SIM1=SIM1);
drawSIM(SIM=SIM1,DELTA_T=DT,END_T=END_TIME);
